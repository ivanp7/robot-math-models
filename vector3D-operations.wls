#!/usr/bin/env wolframscript
(* ::Package:: *)

(* ::Input:: *)
(*(**********************************************)*)
(*(***\:041e\:043f\:0435\:0440\:0430\:0446\:0438\:0438 \:0441 \:0432\:0435\:043a\:0442\:043e\:0440\:0430\:043c\:0438 \:0432 \:0442\:0440\:0435\:0445\:043c\:0435\:0440\:043d\:043e\:043c \:043f\:0440\:043e\:0441\:0442\:0440\:0430\:043d\:0441\:0442\:0432\:0435***)*)
(*(**********************************************)*)


(* ::Input:: *)
(*(*\:041d\:0443\:043b\:0435\:0432\:043e\:0439 \:0432\:0435\:043a\:0442\:043e\:0440*)*)
(*nullVector={0,0,0};*)
(**)
(*(*\:0421\:0438\:0441\:0442\:0435\:043c\:044b \:043a\:043e\:043e\:0440\:0434\:0438\:043d\:0430\:0442*)*)
(*cartesian[vec_]:=With[{rho=vec[[1]],phi=vec[[2]],theta=vec[[3]]},rho*{Cos[theta]*Cos[phi],Cos[theta]*Sin[phi],Sin[theta]}];*)
(*spherical[vec_]:=With[{rho=Sqrt[Total[vec^2]],x=vec[[1]],y=vec[[2]],z=vec[[3]]},{rho,ArcTan[x,y],ArcSin[z/rho]}];*)
(*sphericalAngles[vec_]:=spherical[vec][[2;;3]];*)
(**)
(*(*\:041e\:043f\:0435\:0440\:0430\:0446\:0438\:0438 \:0441 \:043a\:0432\:0430\:0442\:0435\:0440\:043d\:0438\:043e\:043d\:0430\:043c\:0438*)*)
(*quaternion[sca_,vec_]:=Join[{sca},vec];*)
(*qScalar[qu_]:=qu[[1]];*)
(*qVector[qu_]:=qu[[2;;4]];*)
(**)
(*quatMultSca[qu1_,qu2_]:=qScalar[qu1]*qScalar[qu2]-Dot[qVector[qu1],qVector[qu2]];*)
(*quatMultVec[qu1_,qu2_]:=qScalar[qu1]*qVector[qu2]+qScalar[qu2]*qVector[qu1]+Cross[qVector[qu1],qVector[qu2]];*)
(*quatMult[qu1_,qu2_]:=quaternion[quatMultSca[qu1,qu2],quatMultVec[qu1,qu2]];*)
(**)
(*quatConj[qu_]:=quaternion[qScalar[qu],-qVector[qu]];*)
(*quatNormSq[qu_]:=Total[qu^2];*)
(*quatInv[qu_]:=quatConj[qu]/quatNormSq[qu];*)
(**)
(*quatRotate[qu_,p_]:=quatMult[quatMult[qu,p],quatInv[qu]];*)
(**)
(*(*\:041e\:043f\:0435\:0440\:0430\:0446\:0438\:0438 \:0441 \:0432\:0435\:043a\:0442\:043e\:0440\:0430\:043c\:0438*)*)
(*vecNormSq[vec_]:=Total[vec^2];*)
(*vecNorm[vec_]:=Sqrt[Total[vec^2]];*)
(*distanceSq[vec1_,vec2_]:=vecNormSq[vec1-vec2];*)
(*distance[vec1_,vec2_]:=vecNorm[vec1-vec2];*)
(**)
(*vecNormalize[vec_]:=vec/vecNorm[vec];*)
(**)
(*(*\:041a\:043e\:0441\:0438\:043d\:0443\:0441 \:0443\:0433\:043b\:0430 \:0438 \:0443\:0433\:043e\:043b \:043c\:0435\:0436\:0434\:0443 \:0432\:0435\:043a\:0442\:043e\:0440\:0430\:043c\:0438*)*)
(*vecAngleCos[vec1_,vec2_]:=Dot[vec1,vec2]/(vecNorm[vec1]*vecNorm[vec2]);*)
(*vecAngle[vec1_,vec2_]:=ArcCos[vecAngleCos[vec1,vec2]];*)
(**)
(*vecToQuat[vec_]:=quaternion[0,vec]; *)
(**)
(*(*\:041f\:043e\:0432\:043e\:0440\:043e\:0442 \:0432\:0435\:043a\:0442\:043e\:0440\:0430 \:0441 \:043f\:043e\:043c\:043e\:0449\:044c\:044e \:043a\:0432\:0430\:0442\:0435\:0440\:043d\:0438\:043e\:043d\:0430*)*)
(*rotateByQ[vec_,qu_]:=qVector[quatRotate[qu,vecToQuat[vec]]];*)
(**)
(*(*\:041a\:0432\:0430\:0442\:0435\:0440\:043d\:0438\:043e\:043d \:0432\:0440\:0430\:0449\:0435\:043d\:0438\:044f*)*)
(*rotQuat[angle_,axis_]:=quaternion[Cos[angle/2],Sin[angle/2]*vecNormalize[axis]];*)
(*(*\:043d\:0443\:043b\:0435\:0432\:043e\:0435 \:0432\:0440\:0430\:0449\:0435\:043d\:0438\:0435*)*)
(*idQuat=quaternion[1,nullVector];*)
